{"version":3,"sources":["webpack:///./ui/Validation.js"],"names":["Validate","el","options","_this","this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_8___default","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default","ajax","change [required]","submit","form","$el","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_7___default","$$events","_core_modules_createEvents__WEBPACK_IMPORTED_MODULE_11__","call","events","attachAll","rules","$fields","ramda_src_reduce__WEBPACK_IMPORTED_MODULE_6___default","acc","field","name","message","domify__WEBPACK_IMPORTED_MODULE_12___default","parent","closest","appendChild","_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_5___default","querySelectorAll","setAttribute","destroy","Object","entries","forEach","_ref","_ref2$","_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default","removeChild","e","elm","preventDefault","handleErrors","errors","validate_js__WEBPACK_IMPORTED_MODULE_10___default","fullMessages","input","showError","emit","error","removeError","_ref3","node","classList","remove","add","textContent","join","_ref5","_this$options","errorArray","map","_ref7","_ref8","key","value","fields","data","FormData","defaults","assign","mitt__WEBPACK_IMPORTED_MODULE_13__"],"mappings":"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","file":"ui-Validation.bundle.1544006707924.js","sourcesContent":["import validate from 'validate.js'\nimport { createEvents } from '@/core/modules/createEvents'\nimport * as R from 'ramda'\nimport domify from 'domify'\nimport mitt from 'mitt'\n\n/**\n * @namespace Validate\n * @class Validate\n * @description Handles form validation, and nothing else\n *\n * @example\n *\n * js:\n * const $form = document.querySelector('[data-form-delivery]')\n * const validator = new Validate($form, {\n * \trules: {\n * \t\temail: {\n * \t\t\tpresence: true,\n * \t\t\temail: true\n * \t\t},\n *\n * \t\tfirstName: {\n * \t\t\tpresence: true\n * \t\t},\n *\n * \t\tsurname: {\n * \t\t\tpresence: true\n * \t\t}\n * \t},\n * \tajax: true\n * })\n *\n * validator.mount()\n *\n * validator.on('submit:success', ({ data }) => {\n * \tfetch(data, {\n * \t\tmethod: 'POST'\n * \t})\n * \t.then(response => response.json)\n * \t.then(data => {\n * \t\t// handle the response\n * \t})\n * })\n *\n * html:\n * <form>\n * \t<div class=\"flex-1\" data-field-row=\"\">\n * \t\t<label for=\"firstName\">First Name*</label>\n * \t\t<input type=\"text\" name=\"firstName\" id=\"firstName\" required>\n * \t</div>\n * \t<button type=\"submit\">Submit</button>\n * </form>\n *\n * @param {HTMLElement} el - the form to validate\n * @param {Object} options - any form options\n * @property {Boolean} options.ajax - should prevent default be called when submitting the form\n * @property {Boolean} options.rules - form validation rules\n *\n */\n\nexport default class Validate {\n\tdefaults = {\n\t\tajax: true\n\t}\n\n\tconstructor(el, options) {\n\t\tthis.$el = el\n\t\tthis.options = { ...this.defaults, ...options }\n\t\tObject.assign(this, mitt())\n\t}\n\n\tevents = {\n\t\t'change [required]': 'onChange',\n\t\tsubmit: 'onSubmit'\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method setForm\n\t * @desc set the form\n\t * @param {HTMLElement} form - the form element to validate\n\t *\n\t * @return {Validate}\n\t */\n\tsetForm = form => {\n\t\tthis.$el = form\n\n\t\treturn this\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method setOptions\n\t * @desc update the options\n\t * @param {Object} options - validation rules and options\n\t *\n\t * @return {Validate}\n\t */\n\tsetOptions = options => {\n\t\tthis.options = { ...this.options, options }\n\n\t\treturn this\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method mount\n\t * @desc bootstrap the form, add events\n\t *\n\t * @return {Validate}\n\t */\n\tmount = () => {\n\t\tthis.$$events = createEvents.call(this, this.$el, this.events)\n\t\tthis.$$events.attachAll()\n\n\t\tconst { rules } = this.options\n\n\t\tthis.$fields = R.reduce((acc, field) => {\n\t\t\tconst { name } = field\n\t\t\tconst message = domify('<span class=\"form__error\"></span>')\n\t\t\tconst parent = field.closest('[data-field-row]')\n\n\t\t\tparent.appendChild(message)\n\n\t\t\tacc[name] = {\n\t\t\t\tfield,\n\t\t\t\tparent,\n\t\t\t\tmessage\n\t\t\t}\n\n\t\t\treturn acc\n\t\t}, {})([...this.$el.querySelectorAll('[required]')])\n\n\t\tif (rules) {\n\t\t\tthis.$el.setAttribute('novalidate', true)\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method unmount\n\t * @desc remove the events and error nodes\n\t *\n\t * @return {void}\n\t */\n\tunmount = () => {\n\t\tthis.$$events.destroy()\n\n\t\tObject.entries(this.$fields).forEach(([, { message, parent }]) => {\n\t\t\tparent.removeChild(message)\n\t\t})\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method onChange\n\t * @description Listen to change events on required fields\n\t * @param {Object} e - event object\n\t * @param {HTMLElement} elm - element that has changed\n\t *\n\t * @return {void}\n\t */\n\tonChange = (e, elm) => {\n\t\te.preventDefault()\n\t\tthis.handleErrors(elm)\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method handleErrors\n\t * @description add/remove errors\n\t * @param {HTMLElement} elm - element that has changed\n\t *\n\t * @return {void}\n\t */\n\thandleErrors = elm => {\n\t\tconst { rules } = this.options\n\t\tconst { name } = elm\n\t\tconst errors = validate(this.$el, rules, {\n\t\t\tfullMessages: false\n\t\t})\n\n\t\tconst input = this.$fields[name]\n\n\t\tif (errors && errors[name]) {\n\t\t\tthis.showError(input, errors[name])\n\t\t\tthis.emit('input:error', {\n\t\t\t\tinput,\n\t\t\t\terror: errors[name]\n\t\t\t})\n\t\t} else {\n\t\t\tthis.removeError(input)\n\t\t\tthis.emit('input:valid', {\n\t\t\t\tinput\n\t\t\t})\n\t\t}\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method showError\n\t * @description update the fields classes and inject the error message\n\t * @param {Object} input - the fields object - includes, input, parent and message nodes\n\t * @param {Array} error - an array of errors\n\t *\n\t * @return {void}\n\t */\n\tshowError = (input, error) => {\n\t\tconst { message } = input\n\n\t\tObject.entries(input).forEach(([, node]) => {\n\t\t\tnode.classList.remove('is-valid')\n\t\t\tnode.classList.add('has-error')\n\t\t})\n\n\t\tmessage.textContent = error.join(' \\n')\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method showError\n\t * @description update the fields classes and remove the error message\n\t * @param {Object} input - the fields object - includes, input, parent and message nodes\n\t *\n\t * @return {void}\n\t */\n\tremoveError = input => {\n\t\tconst { message } = input\n\n\t\tObject.entries(input).forEach(([, node]) => {\n\t\t\tnode.classList.remove('has-error')\n\t\t\tnode.classList.add('is-valid')\n\t\t})\n\n\t\tmessage.textContent = ''\n\t}\n\n\t/** *\n\t * @memberof Validate\n\t * @method onSubmit\n\t * @description handle form submission, check for errors and emit events\n\t * @param {Object} e - the events object\n\t *\n\t * @return {void}\n\t */\n\tonSubmit = e => {\n\t\tconst { rules, ajax } = this.options\n\n\t\tconst errors = validate(this.$el, rules, {\n\t\t\tfullMessages: false\n\t\t})\n\n\t\tif (errors || ajax) e.preventDefault()\n\n\t\tif (errors) {\n\t\t\tconst errorArray = Object.entries(errors).map(([key, value]) => {\n\t\t\t\tconst input = this.$fields[key]\n\t\t\t\tthis.handleErrors(input.field, value)\n\n\t\t\t\treturn {\n\t\t\t\t\tinput,\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.emit('submit:errors', errorArray)\n\t\t} else {\n\t\t\tthis.emit('submit:success', {\n\t\t\t\tform: this.$el,\n\t\t\t\tfields: this.$fields,\n\t\t\t\tdata: new FormData(this.$el)\n\t\t\t})\n\t\t}\n\t}\n}\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"sourceRoot":""}